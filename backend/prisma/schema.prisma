// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum AchievementType {
    FIRST_FRIEND
    FIRST_GAME
    FIRST_CHANNEL
    FIRST_WIN
}

model User {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updateAt  DateTime @updatedAt

    name    String  @unique // 42 login
    pseudo  String? @unique
    avatar  String?
    photo42 String

    //Auth
    jwt          String[]
    banJwt       String[]
    refreshToken String?

    //2FA
    otpEnabled  Boolean @default(false)
    otpVerified Boolean @default(false)
    otpSecret   String?
    otpUrl      String?
    requestUuid String? @unique

    channels ChannelUser[]
    messages Message[]

    wins   Int @default(0)
    looses Int @default(0)
    games  Int @default(0)
    score  Int @default(0)
    rank   Int @default(0)

    chosenBadge AchievementType?
    allBadges   AchievementType[] @default([])

    friendship FriendShip[] @relation(name: "UserFriends")
    friends    FriendShip[] @relation(name: "FriendUsers")

    blocked String[]

    UserGames     Game[] @relation(name: "userGames")
    OpponentGames Game[] @relation(name: "opponentGames")
}

model Channel {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updateAt  DateTime @updatedAt

    name    String  @unique
    hash    String?
    private Boolean @default(false)
    direct  Boolean @default(false)

    users    ChannelUser[]
    messages Message[]
}

model Message {
    id     Int      @id @default(autoincrement())
    sentAt DateTime @default(now())

    sentBy     User   @relation(fields: [sentByName], references: [name], onDelete: Cascade)
    sentByName String

    channel     Channel @relation(fields: [channelName], references: [name], onDelete: Cascade)
    channelName String

    content String
}

model Game {
    id        Int       @id @default(autoincrement())
    createdAt DateTime  @default(now())
    endAt     DateTime?
	key		  String @unique

    userName String
    user   User   @relation(name: "userGames", fields: [userName], references: [name], onDelete: Cascade)

    opponentName    String
    opponent      User   @relation(name: "opponentGames", fields: [opponentName], references: [name], onDelete: Cascade)
    userScore     Int
    opponentScore Int
}

// Relation table for many-to-many relation
model ChannelUser {
    channelId Int
    channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    owner   Boolean @default(false)
    admin   Boolean @default(false)
    member  Boolean @default(false)
    banned  Boolean @default(false)
    muted   Boolean @default(false)
    invited Boolean @default(false)

    @@id([channelId, userId])
}

model FriendShip {
    userId String
    user   User   @relation(name: "UserFriends", fields: [userId], references: [id], onDelete: Cascade)

    friendId String
    friend   User   @relation(name: "FriendUsers", fields: [friendId], references: [id], onDelete: Cascade)

    accepted Boolean @default(false)

    @@id([userId, friendId])
}
