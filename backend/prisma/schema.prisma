// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
	id 				Int @id @default(autoincrement())
	createdAt 		DateTime @default(now())
	updateAt 		DateTime @updatedAt

	name			String @unique // 42 login
	pseudo 			String? @unique // by default == name ?
	avatar			String?
	photo42			String

	//Auth
	token42 		Json
	jwt				String[]
	Ban_jwt			String[]
	refreshToken	String?

	//2FA
	otp_enabled		Boolean  @default(false)
	otp_verified	Boolean  @default(false)
	otp_secret		String?
	otp_url			String?

	channelsOwn		Channel[] @relation("channel_owner")
	channelsAdmin	ChannelAdmin[]
	channelsMember	ChannelMember[]
	channelBanned	ChannelBanned[]
	channelMuted	ChannelMuted[]
	channelInvit	ChannelInvited[]
	messages		Message[]

	wins			Int @default(0)
	looses			Int @default(0)
	games			Int @default(0)
	score			Int @default(0)
	level			Int @default(0)
	rank			Int @default(0)

	//history		Game[] -> TO IMPROVE
	//friendship 	Friendship[] -> TODO
	//notifs		String [] or NotificationModel[] -> TODO
}

// Probably final model
model	Channel {
	id 				Int @id @default(autoincrement())
	createdAt 		DateTime @default(now())
	updateAt 		DateTime @updatedAt

	name			String	@unique
	hash			String?
	private			Boolean @default(false)

	owner			User @relation(name: "channel_owner", fields: [ownerId], references: [id])
	ownerId			Int

	admins			ChannelAdmin[]
	members			ChannelMember[]
	banned			ChannelBanned[]
	muted			ChannelMuted[]
	invited			ChannelInvited[]
	messages		Message[]
}

// Maybe it will change
model	Message {
	id 				Int @id @default(autoincrement())
	sendAt			DateTime @default(now())

	sendBy			User	@relation(fields: [sendById], references: [id])
	sendById		Int

	channel			Channel @relation(fields: [channelId], references: [id])
	channelId		Int

	content			String
}

// Not the final model for Game.
model	Game {
	id 				Int @id @default(autoincrement())
	createdAt 		DateTime @default(now())
	endAt 			DateTime?

	live			Boolean
	//creator			User
	//guest				User
	winnerId		Int?
	looserId		Int?
	scoreCreator	Int @default(0)
	scoreGuest		Int	@default(0)
	//socket ?
	//theme			String ou Url ? (same avatar)
	difficulty		Int @default(1)
	matchmaking		Boolean
}

// Relation tables for many-to-many relations
model ChannelAdmin {
  channelId Int
  channel Channel @relation(fields: [channelId], references: [id])

  userId    Int
  user    User @relation(fields: [userId], references: [id])

  @@id([channelId, userId])
}

model ChannelMember {
  channelId Int
  channel Channel @relation(fields: [channelId], references: [id])

  userId    Int
  user    User @relation(fields: [userId], references: [id])

  @@id([channelId, userId])
}

model ChannelBanned {
  channelId Int
  channel Channel @relation(fields: [channelId], references: [id])

  userId    Int
  user    User @relation(fields: [userId], references: [id])

  @@id([channelId, userId])
}

model ChannelMuted {
  channelId Int
  channel Channel @relation(fields: [channelId], references: [id])

  userId    Int
  user    User @relation(fields: [userId], references: [id])

  @@id([channelId, userId])
}

model ChannelInvited {
  channelId Int
  channel Channel @relation(fields: [channelId], references: [id])

  userId    Int
  user    User @relation(fields: [userId], references: [id])

  @@id([channelId, userId])
}

// Use "npx prisma generate" = create TSClass from Schema for our code.
// => import { User } from '@prisma/client';
